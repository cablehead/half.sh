#!/usr/bin/env python3

import base64
import json
import sys
import os


def read(path, name):
    return open(os.path.join(path, name), 'rb').read()[:2000].strip()


def read_as_b64(path, name):
    return base64.b64encode(read(path, name)).decode()


def node(base):
    return {
        'run': read_as_b64(base, 'run'),
        'stdout': read_as_b64(base, 'stdout'),
        'stderr': read_as_b64(base, 'stderr'),
        'exitcode': int(read(base, 'exitcode')),
        }


def main(a):
    base = a.pop(0)
    P = os.path.join(base, 'node')

    D = {
        'root': [],
        'starred': [],
        'node': {},
        'tree': {},
        'selected': None,
        }

    if not os.path.exists(P):
        print(json.dumps({'$set': D}))
        return

    x = a and a.pop(0)
    if x:
        print(json.dumps({'node': {x: {'$set': node(os.path.join(P, x))}}}))
        return

    D['selected'] = open(os.path.join(base, 'selected')).read().strip()

    for x in os.listdir(P):
        base = os.path.join(P, x)
        D['node'][x] = node(base)
        stdin = os.path.realpath(os.path.join(base, 'stdin'))
        if stdin == '/dev/null':
            D['root'].append(x)
        else:
            parent = os.path.basename(os.path.dirname(stdin))
            D['tree'].setdefault(parent, []).append(x)
        if os.path.exists(os.path.join(base, 'starred')):
            D['starred'].append(x)

    print(json.dumps({'$set': D}))


main(sys.argv[1:])
