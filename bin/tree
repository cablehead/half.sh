#!/usr/bin/env python3

import pathlib
import base64
import json
import sys
import os


def read(P, default=None):
    try:
        return P.read_text().strip()
    except:
        return default


def read_as_b64(P):
    return base64.b64encode(read(P).encode()).decode()


def node(P):
    return {
        'run': read_as_b64(P/'run'),
        'stdin': (P/'stdin').resolve().parent.name,
        'stdout': read_as_b64(P/'stdout'),
        'stderr': read_as_b64(P/'stderr'),
        'exitcode': int(read(P/'exitcode')),
        'starred': (P/'starred').exists(),
        'raw': (P/'raw').exists(),
        }


def project(P):
    return {
        "name": read(P/'name', 'unnamed'),
        "N": (P/'N').exists() and (P/'N').resolve().name,
        "node": dict((x.name, node(x)) for x in (P/'node').iterdir()),
    }


def draw_node(a):
    P = pathlib.Path(a.pop(0)).resolve()
    print(json.dumps({
        'project': {
            P.parent.parent.name: {
                'node': {
                    P.name: {
                        '$set': node(P)}}}}}))


def draw_root(a):
    P = pathlib.Path(a.pop(0))

    if not (P/'project').exists():
        return {}
 
    return {
        "P": (P/'P').exists() and (P/'P').resolve().name,
        "project": dict(
            (x.name, project(x)) for x in (P/'project').iterdir()),
    }

    print(json.dumps(D))
    return

    D = {
        'root': [],
        'starred': [],
        'node': {},
        'tree': {},
        'selected': None,
        }

    if not os.path.exists(P):
        print(json.dumps({'$set': D}))
        return

    x = a and a.pop(0)
    if x:
        print(json.dumps({'node': {x: {'$set': node(os.path.join(P, x))}}}))
        return

    D['selected'] = open(os.path.join(base, 'selected')).read().strip()

    for x in os.listdir(P):
        base = os.path.join(P, x)
        D['node'][x] = node(base)
        stdin = os.path.realpath(os.path.join(base, 'stdin'))
        if stdin == '/dev/null':
            D['root'].append(x)
        else:
            parent = os.path.basename(os.path.dirname(stdin))
            D['tree'].setdefault(parent, []).append(x)
        if os.path.exists(os.path.join(base, 'starred')):
            D['starred'].append(x)

    print(json.dumps({'$set': D}))


def main():
    a = sys.argv[1:]
    method = a.pop(0)
    assert method in ['node', 'root']

    if method == 'root':
        print(json.dumps({'$set': draw_root(a)}))
        return

    draw_node(a)


main()
