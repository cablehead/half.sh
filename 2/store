#!/usr/bin/env python3 -u

"""
Usage:
    {name} test
    {name} [--path=<path>] tree
    {name} [--path=<path>] state
    {name} [--path=<path>] project new
    {name} [--path=<path>] project list
    {name} [--path=<path>] project <project-id>
    {name} [--path=<path>] project <project-id> delete
    {name} [--path=<path>] project <project-id> insert
    {name} [--path=<path>] node <node-id>
    {name} [--path=<path>] node <node-id> cat
    {name} [--path=<path>] node <node-id> run
    {name} [--path=<path>] node <node-id> pipe
    {name} [--path=<path>] node <node-id> delete
"""


import subprocess
import threading
import tempfile
import logging
import base64
import shutil
import ctypes
import time
import json
import sys
import os

import docopt
import psutil
import lmdb


class LMDB:
    class Env:
        def __init__(self, env):
            self.env = env

        def rx(self):
            return LMDB.Tx(self.env)

        def wx(self):
            return LMDB.Tx(self.env, write=True)

    class Tx:
        def __init__(self, env, write=False, top=None, parent=None):
            self.env = env
            self.write = write
            if write or not top:
                self.tx = self.env.begin(write=write, parent=parent)
            self.top = top or self

        def __enter__(self):
            return self

        def __exit__(self, exc_type, exc_value, traceback):
            if exc_type:
                self.top.tx.abort()
            else:
                if self.write or self.top == self:
                    self.tx.commit()

        def rx(self):
            return LMDB.Tx(self.env, top=self.top)

        def wx(self):
            assert self.write
            return LMDB.Tx(self.env, write=True, top=self.top, parent=self.tx)

        def cursor(self):
            return self.tx.cursor()

        def get(self, *a, **kw):
            return self.tx.get(*a, **kw)

        def put(self, *a, **kw):
            return self.tx.put(*a, **kw)

        def delete(self, *a, **kw):
            return self.tx.delete(*a, **kw)


"""
# misc
deps
check

half.sh
help-commands
repl

# done
new -> project-new
project-delete

cat
i
run
tree
pipe
insert
delete

# in progress
serve - need to add a watchable stream

# TBD
clone

watch
refresh

project-rename
project-select

select    # moving to client side
"""


log = logging.getLogger(__name__)


class Fity3(ctypes.Structure):
    _fields_ = [
        ('sequence', ctypes.c_uint),
        ('last', ctypes.c_ulonglong), ]


class Fity3Exception(Exception):
    pass


class Flake(int):
    @staticmethod
    def from_bytes(key):
        return Flake(int.from_bytes(key, sys.byteorder))

    def to_bytes(self):
        return super().to_bytes(7, sys.byteorder)


# Wed, 15 Oct 2014 11:00:00.000 GMT
fitepoch = 1413370800000

worker_id_bits = 8
max_worker_id = -1 ^ (-1 << worker_id_bits)
sequence_bits = 4
worker_id_shift = sequence_bits
timestamp_left_shift = sequence_bits + worker_id_bits
sequence_mask = -1 ^ (-1 << sequence_bits)
timestamp_mask = -1 >> timestamp_left_shift << timestamp_left_shift


def to_timestamp(_id):
    _id = _id >> timestamp_left_shift  # strip the lower bits
    _id += fitepoch                    # adjust for epoch
    _id = _id / 1000                   # convert from milliseconds to seconds
    return _id


def next_id(
        wx,
        key,
        worker_id,
        sleep=lambda x: time.sleep(x/1000.0),
        now=lambda: int(time.time()*1000)):

    assert worker_id >= 0 and worker_id <= max_worker_id

    try:
        state = wx.get(key)
        if not state:
            state = Fity3()
        else:
            state = Fity3.from_buffer_copy(state)

        timestamp = now()

        if state.last > timestamp:
            raise Fity3Exception(
                'clock is moving backwards. waiting until {}'.format(
                    state.last),
                state.last - timestamp)

        if state.last == timestamp:
            state.sequence = (state.sequence + 1) & sequence_mask
            if state.sequence == 0:
                raise Fity3Exception('sequence overrun', 1)
        else:
            state.sequence = 0

        state.last = timestamp

        wx.put(key, state)

        return Flake(
            ((timestamp-fitepoch) << timestamp_left_shift) |
            (worker_id << worker_id_shift) |
            state.sequence)

    except Fity3Exception as e:
        message, wait = e.args
        log.warning(message)
        sleep(wait)
        return next_id(wx, key, worker_id, sleep=sleep, now=now)


def prefix_iter(rx, prefix):
    ret = []
    with rx.cursor() as c:
        if not c.set_range(prefix):
            return ret
        for key, value in c.iternext():
            if not key.startswith(prefix):
                break
            ret.append((key[len(prefix):], value))
    return ret


def node_new(wx, project_id, command='echo Hello, world.', stdin=None):
    node_id = next_id(wx, b'mflake', 0)
    wx.put(b'o'+project_id.to_bytes()+b'nodes'+node_id.to_bytes())
    wx.put(b'o'+node_id.to_bytes()+b'run', command.encode())
    wx.put(b'o'+node_id.to_bytes()+b'p', project_id.to_bytes())
    if stdin:
        wx.put(b'o'+node_id.to_bytes()+b'stdin', stdin.to_bytes())
    return node_id


def node_get(rx, node_id):
    ret = {'ticks': []}
    for key, value in prefix_iter(rx, b'o'+node_id.to_bytes()):
        if key.startswith(b'tick'):
            value = json.loads(value)
            value['tick_id'] = Flake.from_bytes(key[4:])
            ret['ticks'].append(value)
        elif key == b'p':
            ret['p'] = Flake.from_bytes(value)
        elif key == b'stdin':
            ret['stdin'] = Flake.from_bytes(value)
        else:
            ret[key.decode()] = value.decode()
    ret['ticks'].sort(key=lambda x: x['tick_id'])
    return ret


def node_delete(wx, node_id):
    for key, value in prefix_iter(wx, b'o'+node_id.to_bytes()):
        if key == b'p':
            wx.delete(b'o'+value+b'nodes'+node_id.to_bytes())
        wx.delete(b'o'+node_id.to_bytes()+key)


def node_update(wx, node_id, data):
    for name in data:
        wx.put(b'o'+node_id.to_bytes()+name.encode(), data[name].encode())


def project_new(env):
    with env.wx() as wx:
        project_id = next_id(wx, b'mflake', 0)
        wx.put(b'p'+project_id.to_bytes())
        wx.put(b'o'+project_id.to_bytes()+b'name', b'unnamed')
        node_id = node_new(wx, project_id)
    node_run(env, node_id)
    return project_id


def project_get(rx, project_id):
    ret = {'nodes': []}
    for key, value in prefix_iter(rx, b'o'+project_id.to_bytes()):
        if key == b'name':
            ret['name'] = value.decode()
        else:
            ret['nodes'].append(Flake.from_bytes(key[len('nodes'):]))
    return ret


def project_list(rx):
    products = prefix_iter(rx, b'p')
    ret = {}
    for key, _ in products:
        project_id = Flake.from_bytes(key[:7])
        ret[project_id] = project_get(rx, project_id)
    return ret


def project(env, a):
    if a.get('new'):
        return project_new(env)

    if a.get('list'):
        with env.rx() as rx:
            return project_list(rx)

    if a.get('delete'):
        with env.wx() as wx:
            for key, value in prefix_iter(wx, b''):
                print(key, value)
            project_id = Flake(a['<project-id>'])
            project = project_get(wx, project_id)
            for node_id in project['nodes']:
                node_delete(wx, node_id)
            for key, value in prefix_iter(wx, b'o'+project_id.to_bytes()):
                wx.delete(b'o'+project_id.to_bytes()+key)
            wx.delete(b'p'+project_id.to_bytes())
            print()
            print()
            for key, value in prefix_iter(wx, b''):
                print(key, value)
        return

    if a.get('insert'):
        project_id = Flake(a['<project-id>'])
        with env.wx() as wx:
            node_id = node_new(wx, project_id)
        node_run(env, node_id)
        with env.rx() as rx:
            n = node_get(rx, node_id)
            if not n:
                return
            print(json.dumps({
                'project': {
                    n['p']: {
                        'node': {
                            str(node_id): {
                                '$set': node_dump(n)}}}}}))
        return

    with env.rx() as rx:
        project = project_get(rx, Flake(a['<project-id>']))
        ret = {}
        for node_id in project['nodes']:
            ret[node_id] = node_get(rx, node_id)
        return ret


def node_run(env, node_id):
    try:
        path = tempfile.mkdtemp()
        with env.wx() as wx:
            node = node_get(wx, node_id)
            if node['ticks']:
                tick = node['ticks'][-1]
                if 'pid' in tick:
                    # still running?
                    if psutil.pid_exists(tick['pid']):
                        return
                    # runner must have died
                    wx.delete(
                        b'o'+node_id.to_bytes() + b'tick' +
                        Flake(tick['tick_id']).to_bytes())

            with open(
                    os.open(
                        path+'/run', os.O_CREAT | os.O_WRONLY, 0o777),
                    'w') as fh:
                fh.write(node['run'])

            p = subprocess.Popen(
                    path+'/run',
                    shell=True,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    )

            if 'stdin' in node:
                stdin = node_get(wx, node['stdin'])
                p.stdin.write(stdin['ticks'][-1]['stdout'].encode())
            p.stdin.close()

            tick_id = next_id(wx, b'mflake', 0)
            wx.put(
                b'o'+node_id.to_bytes()+b'tick'+tick_id.to_bytes(),
                json.dumps({'pid': p.pid}).encode())

        # end write transation

        res = {}
        res['stdout'] = p.stdout.read().decode()
        res['stderr'] = p.stderr.read().decode()
        res['exitcode'] = p.wait()
        res = json.dumps(res).encode()

        with env.wx() as wx:
            node = node_get(wx, node_id)
            if not node:
                return
            wx.put(
                b'o'+node_id.to_bytes()+b'tick'+tick_id.to_bytes(),
                res)
            # only keep the last two results
            for tick in node['ticks'][:-2]:
                wx.delete(
                    b'o' + node_id.to_bytes() + b'tick' +
                    Flake(tick['tick_id']).to_bytes())

    except Exception:
        log.exception('exception running %s', node_id)
        return []

    finally:
        shutil.rmtree(path)

    depends = []
    with env.rx() as rx:
        for peer_id in project_get(rx, node['p'])['nodes']:
            # being lazy here, we should just pull the peer's stdin attribute
            peer = node_get(rx, peer_id)
            if peer.get('stdin') == node_id:
                depends.append(peer_id)
    return depends


def node(env, a, stdin=None):
    node_id = Flake(a['<node-id>'])

    depends = None

    if a.get('pipe'):
        with env.wx() as wx:
            n = node_get(wx, node_id)
            project_id = n['p']
            node_id = node_new(wx, n['p'], command='cat', stdin=node_id)
        node_run(env, node_id)

    if a.get('run'):
        depends = node_run(env, node_id)

    if a.get('cat'):
        if not stdin:
            stdin = sys.stdin.read()
        with env.wx() as wx:
            node_update(wx, node_id, {'run': stdin})
        depends = node_run(env, node_id)

    if a.get('delete'):
        depends = []
        with env.rx() as rx:
            n = node_get(rx, node_id)
            for peer_id in project_get(rx, n['p'])['nodes']:
                # being lazy here, we should just pull the peer's stdin
                # attribute
                peer = node_get(rx, peer_id)
                if peer.get('stdin') == node_id:
                    depends.append(peer_id)

        for peer_id in depends:
            node(env, {'<node-id>': peer_id, 'delete': True})

        with env.wx() as wx:
            node_delete(wx, node_id)
            print(json.dumps({
                'project': {
                    n['p']: {
                        'node': {'$unset': [str(node_id)]}}}}))
            return

    with env.rx() as rx:
        n = node_get(rx, node_id)
        if not n:
            return
        print(json.dumps({
            'project': {
                n['p']: {
                    'node': {
                        str(node_id): {
                            '$set': node_dump(n)}}}}}))

    # need to rework things, to tease out when to output deltas
    # this is getting squigly
    #
    # we should be able to run these in parallel
    if depends:
        for peer_id in depends:
            node(env, {'<node-id>': peer_id, 'run': True})


def test(a):
    try:
        path = tempfile.mkdtemp()
        env = lmdb.open(path)
        env = LMDB.Env(env)

        with env.rx() as rx1:
            with rx1.rx() as rx2:
                pass

        with env.wx() as wx1:
            with wx1.wx() as wx2:
                pass

        project_id = project(env, {'new': True})
        assert project_id in project(env, {'list': True})

        nodes = project(env, {'<project-id>': project_id})
        for node_id in nodes:
            with env.rx() as rx:
                n = node_get(rx, node_id)
                assert n['ticks'][0]['stdout'] == 'Hello, world.\n'
                node(env, {'<node-id>': node_id, 'pipe': True})
                node(env, {'<node-id>': node_id, 'delete': True})

        nodes = project(env, {'<project-id>': project_id})
        assert nodes == {}

        project(env, {'<project-id>': project_id, 'insert': True})
        nodes = project(env, {'<project-id>': project_id})
        assert nodes != {}

    finally:
        shutil.rmtree(path)
    return True


def node_dump(node):
    if not 'stdout' in node['ticks'][-1]:
        return {}
    ret = {
        'run': base64.b64encode(node['run'].encode()).decode(),
        'stdin': str(node.get('stdin', 'dev')),
        'stdout': base64.b64encode(
            node['ticks'][-1]['stdout'].encode()).decode(),
        'stderr': base64.b64encode(
            node['ticks'][-1]['stderr'].encode()).decode(),
        'exitcode': node['ticks'][-1]['exitcode'], }
    if 'refresh' in node:
        ret['refresh'] = node['refresh']
    return ret


def tree(env, a):
    ret = {'project': {}}
    with env.rx() as rx:
        projects = project_list(rx)
        for project_id, project in projects.items():
            P = {'name': project['name'], 'node': {}}
            for node_id in project['nodes']:
                node = node_get(rx, node_id)
                if node['ticks']:
                    P['node'][node_id] = node_dump(node)
            ret['project'][project_id] = P
    return {'$set': ret}


def watch(env):
    while True:
        renew = []

        with env.rx() as rx:
            projects = project_list(rx)
            for project_id, project in projects.items():
                # being lazy, should be able to just pull the refresh
                # attribute
                for node_id in project['nodes']:
                    n = node_get(rx, node_id)
                    if 'refresh' in n and n['refresh']:
                        refresh = int(n['refresh'])
                        if refresh > 0:
                            now = time.time()
                            last = to_timestamp(n['ticks'][-1]['tick_id'])
                            since = now - last
                            if since > refresh:
                                renew.append(node_id)

        # need to think through the consequences of not doing this inside the
        # read transaction
        for node_id in renew:
            node(env, {'<node-id>': node_id, 'run': True})

        time.sleep(10/1000)


def state(env, a):
    print(json.dumps(tree(env, a)))

    t = threading.Thread(target=watch, args=(env,), daemon=True)
    t.start()

    for line in sys.stdin:
        command = json.loads(line)
        assert command['m'] in ['refresh', 'cat', 'pipe', 'delete', 'insert']

        if command['m'] == 'cat':
            P, N, run = command['a']
            node(env, {'cat': True, '<node-id>': N}, stdin=run)

        if command['m'] == 'refresh':
            P, N, value = command['a']
            with env.wx() as wx:
                node_update(wx, Flake(N), {'refresh': value})

        if command['m'] == 'pipe':
            N, = command['a']
            node(env, {'pipe': True, '<node-id>': N})

        if command['m'] == 'delete':
            N, = command['a']
            node(env, {'delete': True, '<node-id>': N})

        if command['m'] == 'insert':
            P, = command['a']
            project(env, {'insert': True, '<project-id>': P})


def main(a):
    if a['test']:
        return test(a)

    env = lmdb.open('foo', max_readers=1024)
    env = LMDB.Env(env)

    if a['tree']:
        return tree(env, a)

    if a['state']:
        return state(env, a)

    if a['project']:
        return project(env, a)

    if a['node']:
        return node(env, a)


if __name__ == '__main__':
    usage = ' '.join([x.strip() for x in __doc__.split('\\')])
    usage = usage.format(name=sys.argv[0])
    a = docopt.docopt(usage)
    ret = main(a)
    if ret is not None:
        print(json.dumps(ret))
